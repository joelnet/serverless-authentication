service: lambda-auth

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
  environment:
    STAGE: dev

# you can overwrite defaults here
  stage: dev
  region: us-west-2

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#        - "s3:PutObject"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "s3-us-west-2.amazonaws.com" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"

# you can add packaging information here
#package:
#  exclude:
#    - exclude-me.js
#  artifact: my-service-code.zip

functions:
  openidConfiguration:
    handler: handler.openidConfiguration
    events:
      - http:
          path: auth/{realm}/.well-known/openid-configuration
          method: get
          cors: true
  authorize:
    handler: handler.authorize
    events:
      - http:
          path: auth/{realm}/authorize
          method: get
          cors: true
      - http:
          path: auth/{realm}/authorize
          method: post
          cors: true
  token:
    handler: handler.token
    events:
      - http:
          path: auth/{realm}/token
          method: post
          cors: true
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

resources:  
  Resources:
    DynamoDbTableClients:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${opt:stage}-auth-clients
        AttributeDefinitions:
          - AttributeName: realmClientId
            AttributeType: S
        KeySchema:
          - AttributeName: realmClientId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    DynamoDbTableRealms:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${opt:stage}-auth-realms
        AttributeDefinitions:
          - AttributeName: realmId
            AttributeType: S
        KeySchema:
          - AttributeName: realmId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    DynamoDBIamPolicy:
      Type: AWS::IAM::Policy
      DependsOn: DynamoDbTableClients
      Properties:
        PolicyName: lambda-dynamodb
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
              Resource: arn:aws:dynamodb:*:*:table/${opt:stage}-auth-*
        Roles:
          - Ref: IamRoleLambdaExecution
