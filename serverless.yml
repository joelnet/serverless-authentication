service: lambda-auth

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
  memorySize: 128
  environment:
    STAGE: dev

# you can overwrite defaults here
  stage: dev
  region: us-west-2

package:
  exclude:
    - "**/__tests__/**"
    - .vscode/**
    - coverage/**
    - events/**
    - migrations/**
    - static/**
    - tools/**
    - .eslintignore
    - .eslintrc.yml
    - .npmignore
    - .travis.yml
    - README.md

functions:
  openidConfiguration:
    handler: handler.openidConfiguration
    events:
      - http:
          path: auth/{realm}/oidc/.well-known/openid-configuration
          method: get
          cors: true
  authorize:
    handler: handler.authorize
    events:
      - http:
          path: auth/{realm}/oidc/authorize
          method: get
          cors: true
      - http:
          path: auth/{realm}/oidc/authorize
          method: post
          cors: true
  token:
    handler: handler.token
    events:
      - http:
          path: auth/{realm}/oidc/token
          method: post
          cors: true
  userRegistration:
    handler: handler.userRegistration
    events:
      - http:
        path: auth/{realm}/registration
        method: post
        cors: true

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

resources:  
  Resources:
    DynamoDbTableClients:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${opt:stage}-auth-clients
        AttributeDefinitions:
          - AttributeName: realmClientId
            AttributeType: S
        KeySchema:
          - AttributeName: realmClientId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    DynamoDbTableRealms:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${opt:stage}-auth-realms
        AttributeDefinitions:
          - AttributeName: realmId
            AttributeType: S
        KeySchema:
          - AttributeName: realmId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    DynamoDBIamPolicy:
      Type: AWS::IAM::Policy
      DependsOn: DynamoDbTableClients
      Properties:
        PolicyName: lambda-dynamodb
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
              Resource:
                - arn:aws:dynamodb:*:*:table/${opt:stage}-auth-*
                - arn:aws:dynamodb:*:*:table/social-${opt:stage}-users
        Roles:
          - Ref: IamRoleLambdaExecution
